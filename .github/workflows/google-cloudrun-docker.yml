# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: 'sigmaparksense' # TODO: update to your Google Cloud project ID
  REGION: 'us-west2' # TODO: update to your region
  SERVICE: 'parksense-api' # TODO: update to your service name
  REPO_NAME: 'parksense-api'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/452233946348/locations/global/workloadIdentityPools/github-ginger/providers/github' # TODO: update to your workload identity provider
jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: 'ginger-github-test@sigmaparksense.iam.gserviceaccount.com'
      

      # Verify the authentication was successful if any repositories information returns.
      - name: Verify WIF Access
        run: gcloud artifacts repositories list --location=${{ env.REGION }} --project=${{ env.PROJECT_ID }}

      - name: 'Check Access to Artifact Registry'
        run: |
          gcloud auth print-access-token
          gcloud artifacts repositories list \
            --location=us-west2 \
            --project=${{ env.PROJECT_ID }}


      # Load secrets from Google Secret Manager
      - name: 'Load secrets from Secret Manager'
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |
            ENV_FILE:projects/sigmaparksense/secrets/ENV_FILE
          # MONGO_URI:projects/sigmaparksense/secrets/MONGO_URI
          # MONGO_DB:projects/sigmaparksense/secrets/MONGO_DB
          # SECRET_KEY:projects/sigmaparksense/secrets/SECRET_KEY
            
      - name: 'Build and Push with Cloud Build'
        run: |
          gcloud builds submit \
            --tag "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE }}"
      

      - name: 'Deploy to Cloud Run'
        run: |
          gcloud run deploy ${{ env.SERVICE }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --update-secrets=/app/.env=ENV_FILE:latest
        # --update-secrets=MONGO_URI=MONGO_URI:latest,MONGO_DB=MONGO_DB:latest,SECRET_KEY=SECRET_KEY:latest


      # If required, use the Cloud Run URL output in later steps
      - name: 'Show output'
        run: |2-

          echo ${{ steps.deploy.outputs.url }}
